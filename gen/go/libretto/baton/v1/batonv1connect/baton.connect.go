// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: libretto/baton/v1/baton.proto

package batonv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/barrynorthern/libretto/gen/go/libretto/baton/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BatonServiceName is the fully-qualified name of the BatonService service.
	BatonServiceName = "libretto.baton.v1.BatonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BatonServiceIssueDirectiveProcedure is the fully-qualified name of the BatonService's
	// IssueDirective RPC.
	BatonServiceIssueDirectiveProcedure = "/libretto.baton.v1.BatonService/IssueDirective"
)

// BatonServiceClient is a client for the libretto.baton.v1.BatonService service.
type BatonServiceClient interface {
	IssueDirective(context.Context, *connect.Request[v1.IssueDirectiveRequest]) (*connect.Response[v1.IssueDirectiveResponse], error)
}

// NewBatonServiceClient constructs a client for the libretto.baton.v1.BatonService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBatonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BatonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	batonServiceMethods := v1.File_libretto_baton_v1_baton_proto.Services().ByName("BatonService").Methods()
	return &batonServiceClient{
		issueDirective: connect.NewClient[v1.IssueDirectiveRequest, v1.IssueDirectiveResponse](
			httpClient,
			baseURL+BatonServiceIssueDirectiveProcedure,
			connect.WithSchema(batonServiceMethods.ByName("IssueDirective")),
			connect.WithClientOptions(opts...),
		),
	}
}

// batonServiceClient implements BatonServiceClient.
type batonServiceClient struct {
	issueDirective *connect.Client[v1.IssueDirectiveRequest, v1.IssueDirectiveResponse]
}

// IssueDirective calls libretto.baton.v1.BatonService.IssueDirective.
func (c *batonServiceClient) IssueDirective(ctx context.Context, req *connect.Request[v1.IssueDirectiveRequest]) (*connect.Response[v1.IssueDirectiveResponse], error) {
	return c.issueDirective.CallUnary(ctx, req)
}

// BatonServiceHandler is an implementation of the libretto.baton.v1.BatonService service.
type BatonServiceHandler interface {
	IssueDirective(context.Context, *connect.Request[v1.IssueDirectiveRequest]) (*connect.Response[v1.IssueDirectiveResponse], error)
}

// NewBatonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBatonServiceHandler(svc BatonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	batonServiceMethods := v1.File_libretto_baton_v1_baton_proto.Services().ByName("BatonService").Methods()
	batonServiceIssueDirectiveHandler := connect.NewUnaryHandler(
		BatonServiceIssueDirectiveProcedure,
		svc.IssueDirective,
		connect.WithSchema(batonServiceMethods.ByName("IssueDirective")),
		connect.WithHandlerOptions(opts...),
	)
	return "/libretto.baton.v1.BatonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BatonServiceIssueDirectiveProcedure:
			batonServiceIssueDirectiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBatonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBatonServiceHandler struct{}

func (UnimplementedBatonServiceHandler) IssueDirective(context.Context, *connect.Request[v1.IssueDirectiveRequest]) (*connect.Response[v1.IssueDirectiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("libretto.baton.v1.BatonService.IssueDirective is not implemented"))
}
