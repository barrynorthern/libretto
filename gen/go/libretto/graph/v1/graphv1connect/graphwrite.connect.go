// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: libretto/graph/v1/graphwrite.proto

package graphv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/barrynorthern/libretto/gen/go/libretto/graph/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GraphWriteServiceName is the fully-qualified name of the GraphWriteService service.
	GraphWriteServiceName = "libretto.graph.v1.GraphWriteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GraphWriteServiceApplyProcedure is the fully-qualified name of the GraphWriteService's Apply RPC.
	GraphWriteServiceApplyProcedure = "/libretto.graph.v1.GraphWriteService/Apply"
)

// GraphWriteServiceClient is a client for the libretto.graph.v1.GraphWriteService service.
type GraphWriteServiceClient interface {
	Apply(context.Context, *connect.Request[v1.ApplyRequest]) (*connect.Response[v1.ApplyResponse], error)
}

// NewGraphWriteServiceClient constructs a client for the libretto.graph.v1.GraphWriteService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGraphWriteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GraphWriteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	graphWriteServiceMethods := v1.File_libretto_graph_v1_graphwrite_proto.Services().ByName("GraphWriteService").Methods()
	return &graphWriteServiceClient{
		apply: connect.NewClient[v1.ApplyRequest, v1.ApplyResponse](
			httpClient,
			baseURL+GraphWriteServiceApplyProcedure,
			connect.WithSchema(graphWriteServiceMethods.ByName("Apply")),
			connect.WithClientOptions(opts...),
		),
	}
}

// graphWriteServiceClient implements GraphWriteServiceClient.
type graphWriteServiceClient struct {
	apply *connect.Client[v1.ApplyRequest, v1.ApplyResponse]
}

// Apply calls libretto.graph.v1.GraphWriteService.Apply.
func (c *graphWriteServiceClient) Apply(ctx context.Context, req *connect.Request[v1.ApplyRequest]) (*connect.Response[v1.ApplyResponse], error) {
	return c.apply.CallUnary(ctx, req)
}

// GraphWriteServiceHandler is an implementation of the libretto.graph.v1.GraphWriteService service.
type GraphWriteServiceHandler interface {
	Apply(context.Context, *connect.Request[v1.ApplyRequest]) (*connect.Response[v1.ApplyResponse], error)
}

// NewGraphWriteServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGraphWriteServiceHandler(svc GraphWriteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	graphWriteServiceMethods := v1.File_libretto_graph_v1_graphwrite_proto.Services().ByName("GraphWriteService").Methods()
	graphWriteServiceApplyHandler := connect.NewUnaryHandler(
		GraphWriteServiceApplyProcedure,
		svc.Apply,
		connect.WithSchema(graphWriteServiceMethods.ByName("Apply")),
		connect.WithHandlerOptions(opts...),
	)
	return "/libretto.graph.v1.GraphWriteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GraphWriteServiceApplyProcedure:
			graphWriteServiceApplyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGraphWriteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGraphWriteServiceHandler struct{}

func (UnimplementedGraphWriteServiceHandler) Apply(context.Context, *connect.Request[v1.ApplyRequest]) (*connect.Response[v1.ApplyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("libretto.graph.v1.GraphWriteService.Apply is not implemented"))
}
