// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: entities.sql

package db

import (
	"context"
	"encoding/json"
)

const countEntitiesByType = `-- name: CountEntitiesByType :one
SELECT COUNT(*) FROM entities
WHERE version_id = ? AND entity_type = ?
`

type CountEntitiesByTypeParams struct {
	VersionID  string `json:"version_id"`
	EntityType string `json:"entity_type"`
}

func (q *Queries) CountEntitiesByType(ctx context.Context, arg CountEntitiesByTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEntitiesByType, arg.VersionID, arg.EntityType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEntity = `-- name: CreateEntity :one

INSERT INTO entities (id, version_id, entity_type, name, data)
VALUES (?, ?, ?, ?, ?)
RETURNING id, version_id, entity_type, name, data, created_at, updated_at
`

type CreateEntityParams struct {
	ID         string          `json:"id"`
	VersionID  string          `json:"version_id"`
	EntityType string          `json:"entity_type"`
	Name       string          `json:"name"`
	Data       json.RawMessage `json:"data"`
}

// Entities CRUD operations
func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, createEntity,
		arg.ID,
		arg.VersionID,
		arg.EntityType,
		arg.Name,
		arg.Data,
	)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.EntityType,
		&i.Name,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities
WHERE id = ?
`

func (q *Queries) DeleteEntity(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, id)
	return err
}

const getEntity = `-- name: GetEntity :one
SELECT id, version_id, entity_type, name, data, created_at, updated_at FROM entities
WHERE id = ?
`

func (q *Queries) GetEntity(ctx context.Context, id string) (Entity, error) {
	row := q.db.QueryRowContext(ctx, getEntity, id)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.EntityType,
		&i.Name,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntitiesByType = `-- name: ListEntitiesByType :many
SELECT id, version_id, entity_type, name, data, created_at, updated_at FROM entities
WHERE version_id = ? AND entity_type = ?
ORDER BY created_at DESC
`

type ListEntitiesByTypeParams struct {
	VersionID  string `json:"version_id"`
	EntityType string `json:"entity_type"`
}

func (q *Queries) ListEntitiesByType(ctx context.Context, arg ListEntitiesByTypeParams) ([]Entity, error) {
	rows, err := q.db.QueryContext(ctx, listEntitiesByType, arg.VersionID, arg.EntityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.VersionID,
			&i.EntityType,
			&i.Name,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntitiesByVersion = `-- name: ListEntitiesByVersion :many
SELECT id, version_id, entity_type, name, data, created_at, updated_at FROM entities
WHERE version_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListEntitiesByVersion(ctx context.Context, versionID string) ([]Entity, error) {
	rows, err := q.db.QueryContext(ctx, listEntitiesByVersion, versionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entity{}
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.VersionID,
			&i.EntityType,
			&i.Name,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntity = `-- name: UpdateEntity :one
UPDATE entities
SET name = ?, data = ?
WHERE id = ?
RETURNING id, version_id, entity_type, name, data, created_at, updated_at
`

type UpdateEntityParams struct {
	Name string          `json:"name"`
	Data json.RawMessage `json:"data"`
	ID   string          `json:"id"`
}

func (q *Queries) UpdateEntity(ctx context.Context, arg UpdateEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, updateEntity, arg.Name, arg.Data, arg.ID)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.VersionID,
		&i.EntityType,
		&i.Name,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
