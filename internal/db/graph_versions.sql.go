// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: graph_versions.sql

package db

import (
	"context"
	"database/sql"
)

const createGraphVersion = `-- name: CreateGraphVersion :one

INSERT INTO graph_versions (id, project_id, parent_version_id, name, description, is_working_set)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, project_id, parent_version_id, name, description, is_working_set, created_at
`

type CreateGraphVersionParams struct {
	ID              string         `json:"id"`
	ProjectID       string         `json:"project_id"`
	ParentVersionID sql.NullString `json:"parent_version_id"`
	Name            sql.NullString `json:"name"`
	Description     sql.NullString `json:"description"`
	IsWorkingSet    bool           `json:"is_working_set"`
}

// Graph versions CRUD operations
func (q *Queries) CreateGraphVersion(ctx context.Context, arg CreateGraphVersionParams) (GraphVersion, error) {
	row := q.db.QueryRowContext(ctx, createGraphVersion,
		arg.ID,
		arg.ProjectID,
		arg.ParentVersionID,
		arg.Name,
		arg.Description,
		arg.IsWorkingSet,
	)
	var i GraphVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ParentVersionID,
		&i.Name,
		&i.Description,
		&i.IsWorkingSet,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGraphVersion = `-- name: DeleteGraphVersion :exec
DELETE FROM graph_versions
WHERE id = ?
`

func (q *Queries) DeleteGraphVersion(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteGraphVersion, id)
	return err
}

const getGraphVersion = `-- name: GetGraphVersion :one
SELECT id, project_id, parent_version_id, name, description, is_working_set, created_at FROM graph_versions
WHERE id = ?
`

func (q *Queries) GetGraphVersion(ctx context.Context, id string) (GraphVersion, error) {
	row := q.db.QueryRowContext(ctx, getGraphVersion, id)
	var i GraphVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ParentVersionID,
		&i.Name,
		&i.Description,
		&i.IsWorkingSet,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkingSetVersion = `-- name: GetWorkingSetVersion :one
SELECT id, project_id, parent_version_id, name, description, is_working_set, created_at FROM graph_versions
WHERE project_id = ? AND is_working_set = TRUE
`

func (q *Queries) GetWorkingSetVersion(ctx context.Context, projectID string) (GraphVersion, error) {
	row := q.db.QueryRowContext(ctx, getWorkingSetVersion, projectID)
	var i GraphVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ParentVersionID,
		&i.Name,
		&i.Description,
		&i.IsWorkingSet,
		&i.CreatedAt,
	)
	return i, err
}

const listGraphVersionsByProject = `-- name: ListGraphVersionsByProject :many
SELECT id, project_id, parent_version_id, name, description, is_working_set, created_at FROM graph_versions
WHERE project_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListGraphVersionsByProject(ctx context.Context, projectID string) ([]GraphVersion, error) {
	rows, err := q.db.QueryContext(ctx, listGraphVersionsByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GraphVersion{}
	for rows.Next() {
		var i GraphVersion
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.ParentVersionID,
			&i.Name,
			&i.Description,
			&i.IsWorkingSet,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setWorkingSet = `-- name: SetWorkingSet :exec
UPDATE graph_versions
SET is_working_set = CASE WHEN id = ? THEN TRUE ELSE FALSE END
WHERE project_id = ?
`

type SetWorkingSetParams struct {
	ID        string `json:"id"`
	ProjectID string `json:"project_id"`
}

func (q *Queries) SetWorkingSet(ctx context.Context, arg SetWorkingSetParams) error {
	_, err := q.db.ExecContext(ctx, setWorkingSet, arg.ID, arg.ProjectID)
	return err
}

const updateGraphVersion = `-- name: UpdateGraphVersion :one
UPDATE graph_versions
SET name = ?, description = ?
WHERE id = ?
RETURNING id, project_id, parent_version_id, name, description, is_working_set, created_at
`

type UpdateGraphVersionParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateGraphVersion(ctx context.Context, arg UpdateGraphVersionParams) (GraphVersion, error) {
	row := q.db.QueryRowContext(ctx, updateGraphVersion, arg.Name, arg.Description, arg.ID)
	var i GraphVersion
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.ParentVersionID,
		&i.Name,
		&i.Description,
		&i.IsWorkingSet,
		&i.CreatedAt,
	)
	return i, err
}
