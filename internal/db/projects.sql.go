// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one

INSERT INTO projects (id, name, theme, genre, description)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, theme, genre, description, created_at, updated_at
`

type CreateProjectParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Theme       sql.NullString `json:"theme"`
	Genre       sql.NullString `json:"genre"`
	Description sql.NullString `json:"description"`
}

// Projects CRUD operations
func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Theme,
		arg.Genre,
		arg.Description,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Theme,
		&i.Genre,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, theme, genre, description, created_at, updated_at FROM projects
WHERE id = ?
`

func (q *Queries) GetProject(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Theme,
		&i.Genre,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, theme, genre, description, created_at, updated_at FROM projects
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Theme,
			&i.Genre,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = ?, theme = ?, genre = ?, description = ?
WHERE id = ?
RETURNING id, name, theme, genre, description, created_at, updated_at
`

type UpdateProjectParams struct {
	Name        string         `json:"name"`
	Theme       sql.NullString `json:"theme"`
	Genre       sql.NullString `json:"genre"`
	Description sql.NullString `json:"description"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.Name,
		arg.Theme,
		arg.Genre,
		arg.Description,
		arg.ID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Theme,
		&i.Genre,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
