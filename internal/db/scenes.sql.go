// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: scenes.sql

package db

import (
	"context"
)

const createScene = `-- name: CreateScene :one
INSERT INTO scenes (id, title, summary, content)
VALUES (?, ?, ?, ?)
RETURNING id, title, summary, content, created_at, updated_at
`

type CreateSceneParams struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Summary string `json:"summary"`
	Content string `json:"content"`
}

func (q *Queries) CreateScene(ctx context.Context, arg CreateSceneParams) (Scene, error) {
	row := q.db.QueryRowContext(ctx, createScene,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.Content,
	)
	var i Scene
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScene = `-- name: DeleteScene :exec
DELETE FROM scenes
WHERE id = ?
`

func (q *Queries) DeleteScene(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteScene, id)
	return err
}

const getScene = `-- name: GetScene :one
SELECT id, title, summary, content, created_at, updated_at FROM scenes
WHERE id = ?
`

func (q *Queries) GetScene(ctx context.Context, id string) (Scene, error) {
	row := q.db.QueryRowContext(ctx, getScene, id)
	var i Scene
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScenes = `-- name: ListScenes :many
SELECT id, title, summary, content, created_at, updated_at FROM scenes
ORDER BY created_at DESC
`

func (q *Queries) ListScenes(ctx context.Context) ([]Scene, error) {
	rows, err := q.db.QueryContext(ctx, listScenes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Scene{}
	for rows.Next() {
		var i Scene
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScene = `-- name: UpdateScene :one
UPDATE scenes
SET title = ?, summary = ?, content = ?
WHERE id = ?
RETURNING id, title, summary, content, created_at, updated_at
`

type UpdateSceneParams struct {
	Title   string `json:"title"`
	Summary string `json:"summary"`
	Content string `json:"content"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateScene(ctx context.Context, arg UpdateSceneParams) (Scene, error) {
	row := q.db.QueryRowContext(ctx, updateScene,
		arg.Title,
		arg.Summary,
		arg.Content,
		arg.ID,
	)
	var i Scene
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
