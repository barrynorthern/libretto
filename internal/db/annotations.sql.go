// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: annotations.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createAnnotation = `-- name: CreateAnnotation :one

INSERT INTO annotations (id, entity_id, annotation_type, content, metadata, agent_name)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, entity_id, annotation_type, content, metadata, agent_name, created_at
`

type CreateAnnotationParams struct {
	ID             string          `json:"id"`
	EntityID       string          `json:"entity_id"`
	AnnotationType string          `json:"annotation_type"`
	Content        string          `json:"content"`
	Metadata       json.RawMessage `json:"metadata"`
	AgentName      sql.NullString  `json:"agent_name"`
}

// Annotations CRUD operations
func (q *Queries) CreateAnnotation(ctx context.Context, arg CreateAnnotationParams) (Annotation, error) {
	row := q.db.QueryRowContext(ctx, createAnnotation,
		arg.ID,
		arg.EntityID,
		arg.AnnotationType,
		arg.Content,
		arg.Metadata,
		arg.AgentName,
	)
	var i Annotation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.AnnotationType,
		&i.Content,
		&i.Metadata,
		&i.AgentName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnnotation = `-- name: DeleteAnnotation :exec
DELETE FROM annotations
WHERE id = ?
`

func (q *Queries) DeleteAnnotation(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAnnotation, id)
	return err
}

const deleteAnnotationsByEntity = `-- name: DeleteAnnotationsByEntity :exec
DELETE FROM annotations
WHERE entity_id = ?
`

func (q *Queries) DeleteAnnotationsByEntity(ctx context.Context, entityID string) error {
	_, err := q.db.ExecContext(ctx, deleteAnnotationsByEntity, entityID)
	return err
}

const getAnnotation = `-- name: GetAnnotation :one
SELECT id, entity_id, annotation_type, content, metadata, agent_name, created_at FROM annotations
WHERE id = ?
`

func (q *Queries) GetAnnotation(ctx context.Context, id string) (Annotation, error) {
	row := q.db.QueryRowContext(ctx, getAnnotation, id)
	var i Annotation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.AnnotationType,
		&i.Content,
		&i.Metadata,
		&i.AgentName,
		&i.CreatedAt,
	)
	return i, err
}

const listAnnotationsByAgent = `-- name: ListAnnotationsByAgent :many
SELECT id, entity_id, annotation_type, content, metadata, agent_name, created_at FROM annotations
WHERE agent_name = ?
ORDER BY created_at DESC
`

func (q *Queries) ListAnnotationsByAgent(ctx context.Context, agentName sql.NullString) ([]Annotation, error) {
	rows, err := q.db.QueryContext(ctx, listAnnotationsByAgent, agentName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Annotation{}
	for rows.Next() {
		var i Annotation
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.AnnotationType,
			&i.Content,
			&i.Metadata,
			&i.AgentName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnnotationsByEntity = `-- name: ListAnnotationsByEntity :many
SELECT id, entity_id, annotation_type, content, metadata, agent_name, created_at FROM annotations
WHERE entity_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListAnnotationsByEntity(ctx context.Context, entityID string) ([]Annotation, error) {
	rows, err := q.db.QueryContext(ctx, listAnnotationsByEntity, entityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Annotation{}
	for rows.Next() {
		var i Annotation
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.AnnotationType,
			&i.Content,
			&i.Metadata,
			&i.AgentName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnnotationsByType = `-- name: ListAnnotationsByType :many
SELECT id, entity_id, annotation_type, content, metadata, agent_name, created_at FROM annotations
WHERE entity_id = ? AND annotation_type = ?
ORDER BY created_at DESC
`

type ListAnnotationsByTypeParams struct {
	EntityID       string `json:"entity_id"`
	AnnotationType string `json:"annotation_type"`
}

func (q *Queries) ListAnnotationsByType(ctx context.Context, arg ListAnnotationsByTypeParams) ([]Annotation, error) {
	rows, err := q.db.QueryContext(ctx, listAnnotationsByType, arg.EntityID, arg.AnnotationType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Annotation{}
	for rows.Next() {
		var i Annotation
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.AnnotationType,
			&i.Content,
			&i.Metadata,
			&i.AgentName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnnotation = `-- name: UpdateAnnotation :one
UPDATE annotations
SET content = ?, metadata = ?
WHERE id = ?
RETURNING id, entity_id, annotation_type, content, metadata, agent_name, created_at
`

type UpdateAnnotationParams struct {
	Content  string          `json:"content"`
	Metadata json.RawMessage `json:"metadata"`
	ID       string          `json:"id"`
}

func (q *Queries) UpdateAnnotation(ctx context.Context, arg UpdateAnnotationParams) (Annotation, error) {
	row := q.db.QueryRowContext(ctx, updateAnnotation, arg.Content, arg.Metadata, arg.ID)
	var i Annotation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.AnnotationType,
		&i.Content,
		&i.Metadata,
		&i.AgentName,
		&i.CreatedAt,
	)
	return i, err
}
