name: CI

on:
  pull_request:
  push:
    branches:
      - '**'

jobs:
  bazel-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v3
      - name: Show Bazel version
        run: bazel version
      - name: Build all targets
        run: bazel build //...

  schemas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate JSON Schemas
        run: echo "(deprecated)"

  buf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up buf (with token if available to avoid rate limits)
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Lint protos
        run: buf lint
      - name: Generate code
        run: buf generate
      - name: Check generated code is up-to-date
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)" || (echo "Generated code out of date. Run 'buf generate' and commit changes." && exit 1)
        # Note: ajv returns non-zero if no data is provided; we allow it to pass for schema-only validation.

  bazel-test:
    runs-on: ubuntu-latest
    needs: bazel-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v3
      - name: Show Bazel version
        run: bazel version
      - name: Test all targets
        run: bazel test //... --test_output=errors



  integration-test:
    runs-on: ubuntu-latest
    needs: [bazel-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.5'
      - name: Run cross-project demo test
        run: bazel test //internal/graphwrite:cross_project_demo_test --test_output=all
      - name: Start dashboard in background
        run: |
          nohup go run cmd/dashboard/main.go > dashboard.log 2>&1 &
          echo $! > dashboard.pid
          sleep 10
      - name: Test dashboard endpoints
        run: |
          curl -f http://localhost:9000/ || (echo "Dashboard home failed" && exit 1)
          curl -f http://localhost:9000/demo || (echo "Dashboard demo failed" && exit 1)
          echo "✅ Dashboard endpoints working"
      - name: Start monolith in background  
        run: |
          nohup go run cmd/libretto/main.go > monolith.log 2>&1 &
          echo $! > monolith.pid
          sleep 5
      - name: Test monolith endpoints
        run: |
          curl -f http://localhost:8080/healthz || (echo "Monolith health failed" && exit 1)
          curl -f -X POST -H 'Content-Type: application/json' \
            --data '{"text":"Test cross-project directive","act":"1","target":"protagonist"}' \
            http://localhost:8080/libretto.baton.v1.BatonService/IssueDirective || (echo "Baton API failed" && exit 1)
          echo "✅ Monolith endpoints working"
      - name: Cleanup
        if: always()
        run: |
          if [ -f dashboard.pid ]; then
            kill $(cat dashboard.pid) || true
          fi
          if [ -f monolith.pid ]; then
            kill $(cat monolith.pid) || true
          fi
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: |
            dashboard.log
            monolith.log
          if-no-files-found: warn
          retention-days: 7
